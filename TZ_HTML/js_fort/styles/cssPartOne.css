/*
    Die verschiedenen Selektoren: 

    p Element
    #Id
    .Class

    Kombinatoren: 
*/

h2#first-article {

    color:blue;
}

h2 {
    color: red;
}

#first-article {
    color: chartreuse;
}

/* Spezifität wird mehr gewichtet als die Kaskadierung */

h2#first-article {
    color:violet; /* Färbt h2 ein, da es die selbe Spezifität hat, aber weiter unten definiert wurde*/
    font-size: 24px; /* Würde so oder so angwandt werden, da sie zu keiner anderen im Konflikt steht */
}

/*
    UND-Kombinator
    Selektiert alle aufgezählten Elemente
*/

li, p {
    color:rgba(13, 12, 12, 0.779);
}

/* Nachfahr/Descendant-Selektor */

nav li {
    list-style-type: none;
}

/* Direkter-Nachfahr/Child-Selector*/

li>a {
    text-decoration: none;
    color:rgba(13, 12, 12, 0.779)
}

/* Direct-Sibling-Selector*/
h2 + p {
    color: red;
}

/* General Sibling Selector */
h2 ~ p {
    color: blue;
}

/* Attribut Selector */
a[href="#"]  {
    color: tomato;
}

/*
    Pseudoelemente

    Werden an einen anderen Selektor angehängt
    Beginnen mit ::PseudoElementName

    ::after - Fügt etwas als letztes Child eines Elementes an
    ::before - Fügt etwas als erstes Child eines Elementes an
*/

li>a::before {
    content: "Ich bin before";
}

li>a::after {
    content: " Ich bin after";
}

/*
    ::first-letter - Stylt den ersten Buchstaben eines Textes
    ::first-line - Style die erste Zeile eines Absatzes
*/

h2#first-article::first-letter {
    font-size: 48px;
    color: orange;
}

h2+p::first-line {
    background-color: aquamarine;
}

/*
    ::selection - Stylt die Markierung des Benutzers
*/

p::selection {
    background-color: yellow;
}

/*
    ::placeholder - Stylt den Platzhalter eines Elementes
*/

#input1::placeholder {
    color: teal;
}

/*
    Bestimmt wie die Aufzählungszeichen bei li-Elementen aussehen
*/
article li::marker {
    content: "Test";
}

/*
    Pseudoklassen
    :root - Root-Element innerhalb unseres Dokumentes
    Ist spezifischer als html
*/

:root {
    background-color: gainsboro;
}

*:hover {
    color: pink;
}

/*
    :not() 
    Erfasst Elemente die nicht ausgeschlossen wurden innerhalb der Klammer
*/

/*
    n-th Child

    :first-child => Erfässt das erste Kindselement
    :last-child => Erfässt das letzte Kindselement
    :only-child => Erfässt das einzige Element
    :nth-child(n+m) => Erfässt das n-te Kind eines Elements und beginnt bei m zu zählen
    :nth-last-child(n+m) => Erfässt das n-te Kind eines Elements und beginnt bei m zu zählen in umgekehrter Reihenfolge
    Statt n+m kann auch even oder odd einfügen
*/

li:first-child {
    color: chartreuse;
}

li:last-child {
    color: chartreuse; 
}

li:first-child:hover {
    color: blue;
}
/*
li:nth-child(even)
{
    background-color: blueviolet;
}
li:nth-child(odd)
{
    background-color: orange;
}

li:nth-last-child(even)
{
    background-color: blueviolet;
}

li:nth-last-child(odd)
{
    background-color: orange;
}*/

li:nth-child(1n+4) {
    background-color: orange;
}

p {
    color: brown;
    font-size: larger;
    background-color: aquamarine;
}

/*
    :first-of-type => Stylt das erste Element dieses Typens
    :last-of-type => Stylt das letzte Element dieses Typens
    :only-of-type => Stylt das einzige Element dieses Typens
    :nth-of-type(n+m) => Stylt jedes n-te Element dieses Typens beginnend bei m
    :nth-last-of-type(n+m) => Stylt jedes n-te Element dieses Typens beginnend bei m, beginnt von hinten zu zählen
*/

/*
    Bei Input-Elementen
    :valid
    :invalid
    Stylen das Element je nachdem ob es gerade gültig ist oder ungültig

*/